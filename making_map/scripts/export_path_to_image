#!/usr/bin/env python
import rospy
from nav_msgs.msg import Path
from std_srvs.srv import Empty, EmptyResponse
import numpy as np
import cv2
import time

class pathImageExporter:
    """Export nav_msgs/Path as Image"""

    def __init__(self, pathTopic, _imageName):
        self.imageName = _imageName
        self.x = None
        self.y = None
        self.width = 64
        self.height = 64
        rospy.init_node('path_to_image_exporter', anonymous=False)
        rospy.Subscriber(pathTopic, Path, self.subscribePath)
        rospy.Service('path_to_image_exporter', Empty, self.exportPathToImage)

    def subscribePath(self, path):
        self.x = np.array([poses.pose.position.x for poses in path.poses])
        self.y = np.array([poses.pose.position.y for poses in path.poses])

    def exportPathToImage(self, srv):
        while self.x is None:
            time.sleep(0.5)

        # affine mapping
        x_range = np.max(self.x) - np.min(self.x)
        y_range = np.max(self.y) - np.min(self.y)
        if x_range > y_range:
            self.height = int(round(self.height * (y_range / x_range)))
        else:
            self.width = int(round(self.width * (x_range / y_range)))
        self.x = self.x * (self.width - 1) / (np.max(self.x) - np.min(self.x))
        self.x = np.round(self.x + (0 - np.min(self.x))).astype(int)
        self.y = self.y * (self.height - 1) / (np.max(self.y) - np.min(self.y))
        self.y = np.round(self.y + (0 - np.min(self.y))).astype(int)

        matImage = np.full((self.width, self.height, 3), 255)
        matImage[self.x, self.y] = np.array([[0, 0, 255]] * self.x.shape[0])
        cv2.imwrite(self.imageName, matImage, [cv2.IMWRITE_JPEG_QUALITY, 90])
        return EmptyResponse()

if __name__ == '__main__':
    try:
        exporter = pathImageExporter("/rtabmap/mapPath", "image.jpg")
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
