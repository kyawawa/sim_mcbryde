#!/usr/bin/env python
import rospy
import roslaunch
import sys
import copy
from std_srvs.srv import Empty, EmptyResponse

class runLaunch:
    def __init__(self, _pkgname, _launch):
        self.roslaunch_file = roslaunch.rlutil.resolve_launch_arguments([_pkgname, _launch])
        self.default_argv = copy.deepcopy(sys.argv)
        self.parent = None
        rospy.init_node('run_loop', anonymous=False)
        rospy.Service('run_loop', Empty, self.stopLaunch)

    def launch(self, args):
        uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        roslaunch.configure_logging(uuid)
        sys.argv = copy.deepcopy(self.default_argv)
        sys.argv.extend(args)
        self.parent = roslaunch.parent.ROSLaunchParent(uuid, self.roslaunch_file,
                                                       is_core=False, port=None)
        self.parent.start()
        self.parent.spin()

    def stopLaunch(self, srv):
        if self.parent is not None:
            self.parent.shutdown()
        return EmptyResponse()

if __name__ == '__main__':
    # ./run_loop ${max_id} ${world} ${num_cameras} ${shake} ${angle_min} ${angle_max} ${angle_step}
    launchClass = runLaunch("making_map", "making_map.launch")
    for _id in range(1, int(sys.argv[1]) + 1):
        for _angle in range(int(sys.argv[5]), int(sys.argv[6]) + 1, int(sys.argv[7])):
            args = ['db_id:=' + str(_id), 'world_name:=' + sys.argv[2], 'num_cameras:=' + sys.argv[3],
                    'add_shake:=' + sys.argv[4], 'camera_angle:=' + str(_angle),
                    'gazebo_gui:=false', 'rtabmapviz:=false']
            launchClass.launch(args)
